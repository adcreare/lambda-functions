# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ami-engine # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs6.10

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:*"
      #  - "s3:ListBucket"
      #  - "s3:GetObject"
     Resource:
       - "Fn::Join":
         - ""
         -
           - "arn:aws:s3:::"
           - "codepipeline-"
           - "Ref" : "AWS::Region"
           - "-*"
   - Effect: "Allow"
     Action:
       - "ec2:CreateImage"
       - "ec2:DescribeInstances"
     Resource: "*"
   - Effect: "Allow"
     Action:
       - "codepipeline:PutJobSuccessResult"
       - "codepipeline:PutJobFailureResult"
     Resource: "*"

   - Effect: "Allow"
     Action:
       - "sqs:ChangeMessageVisibility"
       - "sqs:ChangeMessageVisibilityBatch"
       - "sqs:DeleteMessage"
       - "sqs:GetQueueUrl"
       - "sqs:ListDeadLetterSourceQueues"
       - "sqs:ReceiveMessage"
       - "sqs:SendMessage"
     Resource:
       - "Fn::Join":
         - ""
         -
           - "arn:aws:sqs:"
           - "Ref" : "AWS::Region"
           - ":"
           - "Ref" : "AWS::AccountId"
           - ":${self:custom.SQSQueueName}"    

   - Effect: "Allow"
     Action:
       - "dynamodb:*"
     Resource:
       - "Fn::Join":
         - ""
         -
           - "arn:aws:dynamodb:"
           - "Ref" : "AWS::Region"
           - ":"
           - "Ref" : "AWS::AccountId"
           - ":table/${self:custom.DynamoDBTableName}"
       - "Fn::Join":
         - ""
         -
           - "arn:aws:dynamodb:"
           - "Ref" : "AWS::Region"
           - ":"
           - "Ref" : "AWS::AccountId"
           - ":table/${self:custom.DynamoDBTableName}/*"
   - Effect: "Allow"
     Action:
       - "cloudformation:DeleteStack"
     Resource:
       - "Fn::Join":
         - ""
         -
           - "arn:aws:cloudformation:"
           - "Ref" : "AWS::Region"
           - ":"
           - "Ref" : "AWS::AccountId"
           - ":stack/*"




functions:
  create-image:
    handler: ami-engine-createimage.handlerequest

    environment:
      snapShotDescription: ami-engine snapshot
      dynamodbTableName: ${self:custom.DynamoDBTableName}
      sqsQueueName: ${self:custom.SQSQueueName}

  custom-resource-handler:
    handler: ami-custom-resource-responder.handlerequest
    environment:
      dynamodbTableName: ${self:custom.DynamoDBTableName}

custom:
    DynamoDBTableName: ami-store
    SQSQueueName: ami-engine-cleanup-jobs

# you can add CloudFormation resource templates here
resources:
  Outputs:
    CreateImageExportValue:
      Value: ${self:service}-${self:provider.stage}-create-image
      Export:
        Name: 'ami-engine-create'

    CustomResourceResponderServiceTokenExportValue:
      Value:
        "Fn::Join":
          - ""
          -
            - "arn:aws:lambda:"
            - "Ref" : "AWS::Region"
            - ":"
            - "Ref" : "AWS::AccountId"
            - ":function:"
            - ${self:service}-${self:provider.stage}-custom-resource-handler
      Export:
        Name: 'ami-engine-custom-resource-responder-service-token'

  Resources:
    SQSCleanupQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.SQSQueueName}

    DynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.DynamoDBTableName}
        AttributeDefinitions:
          - AttributeName: amiid
            AttributeType: S
          - AttributeName: imagename
            AttributeType: S

        KeySchema:
          - AttributeName: amiid
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

        GlobalSecondaryIndexes:
          -
            IndexName: ami-lookup-index
            KeySchema:
              -
                AttributeName: imagename
                KeyType: HASH

            Projection:
              ProjectionType: ALL

            ProvisionedThroughput:
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"
